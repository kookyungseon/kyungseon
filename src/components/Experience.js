import React, { useState, useEffect, useRef } from "react";
import { Briefcase, Calendar, CheckCircle, Code2, Cloud, Sparkles, Building, MapPin } from "lucide-react";

const Experience = () => {
  const [visibleCards, setVisibleCards] = useState({});
  const cardRefs = useRef([]);

  const experiences = [
    {
      company: "(Ï£º)ÌîΩÏÖÄÏïÑÏù¥",
      position: "Ïù∏ÌÑ¥Ïã≠",
      period: "2024.07 ~ 2024.08",
      location: "Ïù∏ÌÑ¥Ïã≠",
      description: "Ïú†Ìïô Ï†ïÎ≥¥ Ï†úÍ≥µ ÏÇ¨Ïù¥Ìä∏ Î¶¨Îâ¥Ïñº Ï∞∏Ïó¨ Î∞è Í∏∞Îä• Í∞úÏÑ†",
      achievements: [
        "Í∑∏ÎàÑÎ≥¥ÎìúÏôÄ FTPÎ•º ÌôúÏö©Ìïú ÏÇ¨Ïù¥Ìä∏ Íµ¨Ï°∞ Ï†ïÎπÑ",
        "Î≤àÏó≠ ÏßÄÏó∞ Ïù¥Ïäà Ìï¥Í≤∞ Î∞è ÏûêÎèô Î≤àÏó≠ Í∏∞Îä• Íµ¨ÌòÑ",
        "Í≥†Ï†ï Î¨∏Íµ¨Ïóê ÎåÄÌïú Îã§Íµ≠Ïñ¥ Î≤àÏó≠ Ï≤òÎ¶¨ Í∞úÎ∞ú",
        "ÏÇ¨Ïö©Ïûê Í≤ΩÌóò Í∞úÏÑ†ÏùÑ ÏúÑÌïú ÏÑ±Îä• ÏµúÏ†ÅÌôî"
      ],
      technologies: ["PHP", "GnuBoard", "Translation API", "FTP", "MySQL"],
      gradient: "from-green-500 to-emerald-600",
      icon: Building
    },
    {
      company: "Î©ÄÌã∞Ï∫†ÌçºÏä§",
      position: "ÏúµÎ≥µÌï© ÌîÑÎ°úÏ†ùÌä∏Ìòï ÌÅ¥ÎùºÏö∞Îìú ÏÑúÎπÑÏä§(MSA) Í∞úÎ∞ú Í≥ºÏ†ï",
      period: "2022.08 ~ 2023.02",
      location: "ÍµêÏú° Í≥ºÏ†ï",
      description: "ÎπÖÎç∞Ïù¥ÌÑ∞ ÌîåÎû´Ìèº Íµ¨Ï∂ï ÍµêÏú° Í≥ºÏ†ï Ïù¥Ïàò Î∞è ÌÅ¥ÎùºÏö∞Îìú Í∏∞Î∞ò Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Í∞úÎ∞ú",
      achievements: [
        "Ï¥ù 944ÏãúÍ∞Ñ Ïù¥ÏÉÅÏùò Ïã§Î¨¥ Ï§ëÏã¨ ÍµêÏú° Ïù¥Ïàò",
        "ÌîÑÎ°úÏ†ùÌä∏ Í∏∞Î∞ò Ïã§Ïäµ ÏàòÌñâ (Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ ÌîÑÎ°úÏ†ùÌä∏ 8h, ÌÅ¥ÎùºÏö∞Îìú ÌôúÏö© ÌîÑÎ°úÏ†ùÌä∏ 128h, ÏúµÎ≥µÌï© ÌîÑÎ°úÏ†ùÌä∏ 264h)",
        "ÌÅ¥ÎùºÏö∞Îìú Î∞è MSA ÌôòÍ≤Ω Ïù¥Ìï¥ÎèÑ Ìñ•ÏÉÅ",
        "Í∏∞ÌöçÎ∂ÄÌÑ∞ Î∞∞Ìè¨ÍπåÏßÄ Ï†Ñ Í≥ºÏ†ï Í≤ΩÌóò"
      ],
      technologies: ["AWS", "MSA", "Docker", "Kubernetes", "DevOps", "Python", "Java"],
      gradient: "from-blue-500 to-cyan-600",
      icon: Cloud
    },
    {
      company: "Í≥†Ïö©ÎÖ∏ÎèôÎ∂Ä ÎØ∏ÎûòÎÇ¥Ïùº ÏùºÍ≤ΩÌóò ÏßÄÏõêÏÇ¨ÏóÖ",
      position: "Ï≤≠ÎÖÑÏ£ºÎèÑ ÌîÑÎ°úÏ†ùÌä∏ Ï∞∏Ïó¨",
      period: "2025.05 ~ 2025.06",
      location: "Ï†ïÎ∂Ä ÏßÄÏõêÏÇ¨ÏóÖ",
      description: "ÏúÑÍ∏∞ ÏÉÅÌô© ÏûêÎèô ÎÖπÏùå Ïï± 'ÏïàÏ†ÑÌïú Î™©ÏÜåÎ¶¨' Í∞úÎ∞ú Ï∞∏Ïó¨ Î∞è UI/UX Í∞úÏÑ† Ï£ºÎèÑ",
      achievements: [
        "UI Î∞òÏùëÌòï ÌîÑÎ°†Ìä∏ÏóîÎìú Í∞úÎ∞ú Î∞è Î©îÏù∏ÌôîÎ©¥, ÌïµÏã¨ Í∏∞Îä• ÌôîÎ©¥ ÏÑ§Í≥Ñ¬∑Íµ¨ÌòÑ",
        "Flutter REST API Í∏∞Î∞ò ÌéòÏù¥ÏßÄ Íµ¨ÌòÑ Î∞è API Ïó∞Îèô",
        "ÏÇ¨Ïö©Ïûê Ìé∏ÏùòÏÑ±Í≥º ÏÉÅÌô© ÎåÄÏùëÏÑ±ÏùÑ Í≥†Î†§Ìïú UX Í∞úÏÑ† Ï£ºÎèÑ",
        "ÌåÄ ÌòëÏóÖÏùÑ ÌÜµÌïú ÏôÑÏ†ÑÌïú Ïï± Í∞úÎ∞ú Í≥ºÏ†ï Í≤ΩÌóò"
      ],
      technologies: ["Flutter", "Dart", "REST API", "UI/UX Design"],
      gradient: "from-purple-500 to-pink-600",
      icon: Briefcase
    }
  ];

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            setVisibleCards((prev) => ({
              ...prev,
              [entry.target.dataset.index]: true,
            }));
          }
        });
      },
      { threshold: 0.1 }
    );

    cardRefs.current.forEach((cardRef) => {
      if (cardRef) {
        observer.observe(cardRef);
      }
    });

    return () => observer.disconnect();
  }, []);

  return (
    <section id="experience" className="py-24 px-6 bg-gradient-to-br from-blue-900 to-purple-900 relative overflow-hidden">
      {/* Î∞∞Í≤Ω Ìå®ÌÑ¥ */}
      <div className="absolute inset-0">
        <div className="absolute inset-0 bg-[url('data:image/svg+xml,%3Csvg%20width%3D%2260%22%20height%3D%2260%22%20viewBox%3D%220%200%2060%2060%22%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%3E%3Cg%20fill%3D%22none%22%20fill-rule%3D%22evenodd%22%3E%3Cg%20fill%3D%22%23ffffff%22%20fill-opacity%3D%220.03%22%3E%3Ccircle%20cx%3D%2230%22%20cy%3D%2230%22%20r%3D%221%22/%3E%3C/g%3E%3C/g%3E%3C/svg%3E')] opacity-50"></div>
      </div>

      <div className="max-w-7xl mx-auto relative z-10">
        <div className="text-center mb-16">
          <div className="flex items-center justify-center mb-6">
            <Briefcase className="text-blue-400 mr-4" size={40} />
            <h2 className="text-5xl md:text-6xl font-bold text-white">
              üíº Work Experience
            </h2>
          </div>
          <p className="text-xl text-gray-300 max-w-3xl mx-auto mb-8">
            Îã§ÏñëÌïú ÌîÑÎ°úÏ†ùÌä∏ÏôÄ ÍµêÏú° Í≥ºÏ†ïÏùÑ ÌÜµÌï¥ ÏåìÏùÄ Ïã§Î¨¥ Í≤ΩÌóòÍ≥º Ï†ÑÎ¨∏ÏÑ±
          </p>
        </div>

        <div className="space-y-12">
          {experiences.map((exp, index) => {
            const IconComponent = exp.icon;
            return (
              <div
                key={index}
                ref={(el) => (cardRefs.current[index] = el)}
                data-index={index}
                className={`transform transition-all duration-700 ease-out ${
                  visibleCards[index] ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-20'
                }`}
                style={{ transitionDelay: `${index * 200}ms` }}
              >
                <div className="relative group">
                  {/* Î©îÏù∏ Ïπ¥Îìú */}
                  <div className="relative bg-gray-800/50 backdrop-blur-sm border border-gray-700 p-8 md:p-12 rounded-2xl shadow-2xl hover:shadow-blue-500/20 transition-all duration-300 group-hover:border-gray-600">
                    {/* Î∞∞Í≤Ω Í∑∏ÎùºÎç∞Ïù¥ÏÖò */}
                    <div className={`absolute inset-0 bg-gradient-to-br ${exp.gradient} opacity-5 group-hover:opacity-10 transition-opacity duration-500 rounded-2xl`}></div>

                    {/* Ìó§Îçî */}
                    <div className="flex flex-col md:flex-row justify-between items-start mb-8 relative z-10">
                      <div className="flex items-center space-x-4 mb-4 md:mb-0">
                        <div className={`p-4 rounded-xl bg-gradient-to-r ${exp.gradient} shadow-lg`}>
                          <IconComponent className="text-white" size={32} />
                        </div>
                        <div>
                          <h3 className="text-2xl md:text-3xl font-bold text-white mb-2">{exp.company}</h3>
                          <p className="text-gray-300 text-lg font-medium">{exp.position}</p>
                          <div className="flex items-center space-x-2 mt-2">
                            <MapPin className="text-gray-400" size={16} />
                            <span className="text-gray-400 text-sm">{exp.location}</span>
                          </div>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2 bg-gray-700/50 px-4 py-2 rounded-full border border-gray-600">
                        <Calendar className="text-gray-400" size={16} />
                        <span className="text-gray-300 font-medium">{exp.period}</span>
                      </div>
                    </div>

                    {/* ÏÑ§Î™Ö */}
                    <p className="text-gray-300 text-lg leading-relaxed mb-8 relative z-10">{exp.description}</p>

                    {/* ÏÑ±Í≥º */}
                    <div className="mb-8 relative z-10">
                      <h4 className="text-xl font-bold text-white mb-6 flex items-center">
                        <CheckCircle className="text-green-400 mr-3" size={24} />
                        Ï£ºÏöî ÏÑ±Í≥º
                      </h4>
                      <div className="grid gap-4">
                        {exp.achievements.map((achievement, i) => (
                          <div key={i} className="flex items-start space-x-3 bg-gray-700/30 p-4 rounded-lg border border-gray-600">
                            <div className="w-2 h-2 bg-green-400 rounded-full mt-2 flex-shrink-0"></div>
                            <span className="text-gray-300">{achievement}</span>
                          </div>
                        ))}
                      </div>
                    </div>

                    {/* Í∏∞Ïà† Ïä§ÌÉù */}
                    <div className="relative z-10">
                      <h4 className="text-xl font-bold text-white mb-4 flex items-center">
                        <Code2 className="text-blue-400 mr-3" size={24} />
                        ÏÇ¨Ïö© Í∏∞Ïà†
                      </h4>
                      <div className="flex flex-wrap gap-3">
                        {exp.technologies.map((tech, i) => (
                          <span
                            key={i}
                            className={`px-4 py-2 bg-gradient-to-r ${exp.gradient} text-white rounded-full text-sm font-medium hover:opacity-80 transition-opacity cursor-default`}
                          >
                            {tech}
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </section>
  );
};

export default Experience;